---
- name: Setup vprofile stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC setup Variables
      include_vars: vars/output_vars
    
    - name: Import VPC setup Variables
      include_vars: vars/vpc_setup.txt

    - name: Import vprostacksetup variables
      include_vars: vars/vprostacksetup

    - name: Create vprofile ec2 key
      ec2_key:
        name: vprokey
        region: "{{ region }}"
      register: vprokey_out


    - name: Save private key into file vprokey.pem
      copy:
        content: "{{ vprokey_out.key.private_key }}"
        dest: "/home/ubuntu/ansible-aws-vpc/vpro-key.pem"
        mode: 0400
      when: vprokey_out.changed

    - name: Create security_group for Load Balancer
      ec2_group:
        name: load-balancer-sg
        description: Allow port 80 from everywhere and all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0 
      register: vproLB_out

    - name: Create security group for vprostack
      ec2_group:
        name: vprostack-sg
        description: Allow port 22 from everywhere and all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          group_id: "{{ vproLB_out.group_id }}"

        - proto: tcp
          from_port: 22
          to_port: 22
          group_id: "{{ BastionSGid }}"          
      register: vprostack_out

    - name: Create security_group for Load Balancer
      ec2_group:
        name: vprostack-sg
        description: Allow port 22 from everywhere and all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:        
        - proto: tcp
          from_port: 22
          to_port: 22
          group_id: "{{ vprostack_out.group_id }}"


    - name: Create Nginx web01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ nginx_ami }}"
        subnet_id: "{{ privsub1id }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "web01"
          Project: vprofile
          Owner: AlexDevOps
        security_group: "{{ vprostack_out.group_id }}"
      register: web01_out


    - name: Create Nginx web01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ tomcat_ami }}"
        subnet_id: "{{ privsub1id }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "app01"
          Project: vprofile
          Owner: AlexDevOps
        security_group: "{{ vprostack_out.group_id }}"
      register: app01_out


    - name: Create memcached mc01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ memcached_ami }}"
        subnet_id: "{{ privsub1id }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "mc01"
          Project: vprofile
          Owner: AlexDevOps
        security_group: "{{ vprostack_out.group_id }}"
      register: mc01_out


    - name: Create Rabbitmq rmq01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ rmq_ami }}"
        subnet_id: "{{ privsub1id }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "rmq01"
          Project: vprofile
          Owner: AlexDevOps
        security_group: "{{ vprostack_out.group_id }}"
      register: rmq01_out


    - name: Create Mysql db01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ musql_ami }}"
        subnet_id: "{{ privsub1id }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "rmq01"
          Project: vprofile
          Owner: AlexDevOps
        security_group: "{{ vprostack_out.group_id }}"
      register: db01_out


    - debug:
        var: db01_out.tagged_instances[0].id


    - local_action:
        module: ec2_elb_lb
        name: "vprofile-elb"
        region: "{{region}}"
        state: "{{state}}"
        instance_ids:
          - "{{ web01_out.tagged_instance[0].id }}"
        purge_instance_ids: true
        security_group_ids: "{{ vprostack_out.group_id }}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80

    - name: Insert/Update Hosts IP & Name in file
      blockinfile:
        path: provision-stack/group_vars/hostip
        block: |
          web01_ip: {{ web01_out.tagged_instance[0].private_ip }}
          db01_ip: {{ db01_out.tagged_instance[0].private_ip }}
          app01_ip: {{ app01_out.tagged_instance[0].private_ip }}
          rmq01_ip: {{ rmq01_out.tagged_instance[0].private_ip }}
          mc01_ip: {{ mc01_out.tagged_instance[0].private_ip }}



    - name: Save private key into file vprokey.pem
      copy:
        src: vprokey.pem
        dest: "/home/ubuntu/provision-stack/vprokey.pem"
        mode: 0400
      when: vprokey_out.changed
